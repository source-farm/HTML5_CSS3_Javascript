@charset "utf-8";

/*

------------------------------------------------------------------------------------------------------------------------
 Общие сведения
------------------------------------------------------------------------------------------------------------------------

Язык HTML не определяет как должен быть отображён документ: HTML определяет структуру домента и его содержимое(контент).
Вид документа определяется одним или несколькими таблицами стилей(style sheets), написанных на языке Cascading Style
Sheets(CSS).

Вид страницы не определяется какой-то одной таблицей стилей: её вид собирается из нескольких стилей, которые имеют
строгий приоритет. Вот список этих стилей в порядке возрастания приоритета:
 - стили браузера         - browser styles(или его ещё называют user agent styles)
 - пользовательские стили - user-defined styles
 - внешние стили          - external styles
 - встроенные стили       - embedded styles
 - инлайн стили           - inline styles

1. Стили браузера.
   В отсутствии каких-либо других стилей к документу применяются стили браузера, т.е. стили, которые встроенны в браузер.

2. Пользовательские стили.
   Более высокий приоритет чем стили браузера имеют пользовательские стили. Это стили, которые пользователь определил
   настройкой браузера. Например, пользователь может увеличить шрифт страницы по-умолчанию.

3. Внешние стили.
   Ещё выше находятся внешние стили - это стили, которые создатель страницы определил и сохранил в CSS файлах, которые
   затем подключил к документу. Один стиль можно подключить к нескольким страницам, что упрощает придание единого облика
   всему сайту.

4. Встроенные стили.
   Над внешними стилями находятся встроенные стили - стили, которые определены в заголовке(head) документа. Такие стили
   применяются только к документу, в котором они определены и недоступны за его пределами.

5. Инлайн стили.
   Самый высокий приоритет имеют инлайн стили - стили, которые определены как атрибуты элемента, а следовательно применимы
   только к нему

Использование встроенных и инлайн стилей не считается хорошей практикой, т.к. они нарушают основной принцип HTML, следуя
которому весь дизайн документа должен быть определён вне этого документа, а HTML используется только для описания
структуры и содержимого документа.

------------------------------------------------------------------------------------------------------------------------
 Правила стиля
------------------------------------------------------------------------------------------------------------------------

Если теги элемента являются строительными блоками HTML документа, то правила стиля(style rules) являются строительными
блоками CSS таблицы стилей. Правила стиля имеют следующую общую форму:

    selector {
        property1: value1;
        property2: value2;
        ...
    }

Здесь selector идентифицирует один элемент или группу элементов внутри документа, а пары property: value определяют
свойства стиля и их значения, которые применяются к элементу(ам). Например, следующее правило стиля:

    h1 {
        color: red;
        text-align: center;
    }

устанавливает для всех заголовков h1 в документе красный цвет и выравнивание по центру. Можно указывать несколько
селекторов через запятые:

    h1, h2 {
        color: red;
    }

CSS также как и HTML игнорирует пробельные символы. Поэтому предыдущее правило можно было бы создать и так:

    h1, h2 {color: red;}

------------------------------------------------------------------------------------------------------------------------
 Расширения браузера
------------------------------------------------------------------------------------------------------------------------

Вдобавок к поддерживаемым W3C свойствам стилей большинство браузеров предоставляют расширенную библиотеку свойств, которые
называются расширениями браузера(browser extensions). Многие стили, которые включаются в спецификацию CSS, начинают свой путь
как расширения браузера. Расширения каждого браузера имеют специфичный для этого браузера префикс(vendor prefix):

    -moz-    - Firefox
    -ms-     - Internet Explorer
    -o-      - Opera
    -webkit- - Chrome, Safari

Например, используя CSS3 можно отображать контент в отдельных столбцах, количество которых указывается с помощью свойства
column-count. Для того чтобы указать это свойство в правиле так, чтобы оно поддерживалось и старыми браузерами и новыми,
сначала необходимо указывать расширения браузера, а затем свойство самого CSS3:

    article {
        -webkit-column-count: 3;
        -moz-column-count: 3;
        column-count: 3;
    }

В общем случае браузеры обрабатывают свойства стилей в порядке, в котором они перечислены, игнорируя свойства, которые
они не смогли распознать или не поддерживают.

------------------------------------------------------------------------------------------------------------------------
 Встраиваемые и инлайн стили
------------------------------------------------------------------------------------------------------------------------

Встраиваемые стили добавляются непосредственно в заголовок HTML документ с помощью элемента style:

    <style>
        style rules
    </style>

Например, следующий код присваивает красный цвет тексту в заголовках h1 и выравнивает текст по-центру:

    <style>
        h1 {
            color: red;
            text-align: center;
        }
    </style>

При прочих равных условиях, стили загруженные последними имеют приоритет над определёнными ранее стилями. В следующем коде
браузер загружает встраиваемый стиль после внешних стилей, давая встраиваемым стилям больший приоритет:

    <link href="tss_styles.css" rel="stylesheet" />
    <style>
        style rules
    </style>

Если мы поменяем местами встраиваемый и внешний стили, то внешний стиль будет иметь больший приоритет.

Инлайн стили применяются непосредственно к конкретному элементу с помощью атрибута style:

    <element style="property1: value1;property2: value2; ...">
        content
    </element>

Например, следующий код делает текст внутри заголовка h1 красным и выравнивает текст по центру:

    <h1 style="color: red; text-align: center;">
        Tri and Succed Sports
    </h1>

Этот стиль применяется только конкретно к этому заголовку h1: к другим заголовам h1 внутри этой страницы и в других
HTML документах этот стиль не применяется. В общем случае не рекомендуется использовать инлайн стили, т.к. это усложняет
изменения стиля всего сайта.

------------------------------------------------------------------------------------------------------------------------
 Специализация, приоритеты и наследование стилей
------------------------------------------------------------------------------------------------------------------------

Имея такое большое количество источников стилей, должен какой-то метод разрешения конфликтов при применении нескольких
стилей к одному элементу. Мы уже изучили, что последний загруженный стиль имеет больший приоритет, чем загруженные до
него стили, но есть и другое важное правило применения стилей:

    Более специализированный стиль имеет приоритет над более общим стилем.

Таким образом, применённый к параграфу стиль имеет больший приоритет, чем стиль, применённый ко всей странице и стиль,
применённый к части текста внутри параграфа имеет приоритет над стилем самого параграфа. Например, в следующем коде
стиль, который присваивает цвету текста внутри параграфа красный цвет, имеет больший приоритет над стилем чёрного цвета
текста, применённого к остальному документу, т.к. этот стиль является более специализированным:

    p {color: red;}
    body {color: black;}

Также следует иметь в виду, что правило специализации применяется, когда есть конфликтующие свойства из нескольких
правил стилей. Когда свойства разные, то применяются оба правила. Если два правила имеют одинаковую специализацию, то
применяется тот, который был определён последним.

Ещё одним фактором, влияющим на рендеринг элементов, является наследование стилей: это когда свойства передаются от
родительского элемента дочерним. Например, следующее правило устанавливает цвет текста внутри статьи красным и этот
цвет получают все текстовые элементы, определённые внутри статьи: параграфы, заголовки и т.д.:

    article {color: red;}
    p {text-align: center;}

В общем мы получаем, что вид любого элемента на странице определяется на основе правил из разных таблиц стилей и свойств,
переданных от одного элемента другим в иерархии элементов. Эти таблицы стилей и правила и формируют слово cascade в
языке CSS - Cascading Style Sheets.

------------------------------------------------------------------------------------------------------------------------
 Создание таблиц стилей
------------------------------------------------------------------------------------------------------------------------

Определить кодировку текста внутрии .css файла можно правилом @charset:

    @charset "encoding";

Здесь encoding указывает на кодировку файла. Это правило должно стоять в самом начале файла, даже до каких-либо
комментариев. Кодировку UTF-8 можно указать следующим правилом:

    @charset "utf-8";

Импортировать стили из файла можно правилом @import:

    @import url(<url>);

Здесь <url> - это URL внешнего файла стилей. Правила @charset и @import являются примерами так называемых
at-правил(at-rule) - это указания браузеру как нужно интерпретировать и парсить содержимое CSS файла. Правило @import
должно быть указано до каких-либо других правил стиля. Пример импорта стилей из файла:

    @import url(company.css);
    @import url(support.css);

------------------------------------------------------------------------------------------------------------------------
 Работа с цветом
------------------------------------------------------------------------------------------------------------------------

Цвет в CSS можно указать либо с помощью названия цвета либо значения. CSS поддерживает 147 названий цветов от самых
обычных как red, blue или black до экзотических как ivory, crimson, khaki.

Более точное цвета можно задать с помощью его числового представления. CSS поддерживает 2 типа представления цветов
с помощью чисел: RGB и HSL.

--------------------------
 RGB
--------------------------
RGB цвет задаётся тройкой интенсивности красного, зелёного и синего составляющих цвета:

    rgb(red, green, blue)

Интенсивность может меняться от 0 до 255 включительно. Например, белый цвет представляется как rgb(255, 255, 255). Всего
с помощью такой схемы можно представить около 16.7 миллионов цветов: больше, чем человеческий глаз может различить.
RGB цвет можно также представить и в 16-ричном виде:

    #redgreenblue

Например, жёлтый цвет, представленный в 10-ричном виде как rgb(255, 255, 0), в 16-ричном виде можно представить как
#FFFF00.
Также интенсивность компонентов RGB цвета можно определить с помощью процента: 100% - самая большая интенсивность,
0% - самая маленькая. Жёлтый цвет можно, например, представить как rgb(100%, 100%, 0%).

--------------------------
 HSL
--------------------------

HSL цвета появились в CSS3 и основаны на цветовой модели, в которой каждый цвет определяется тройкой тон, насыщенность и
яркость(hue, saturation, lightness):

    hsl(hue, saturation, lightness)

Тон может меняться от 0 до 360 градусов, где 0 обозначает красный цвет, 120 - зелёный и 240 - синий. Насыщенность и
яркость могут меняться от 0% до 100%. Жёлтый цвет в схеме HSL можно представить как hsl(60, 100%, 100%).

--------------------------
 Прозрачность
--------------------------

Прозрачность цвета можно установить с помощью свойств rgba или hsla:

    rgba(red, green, blue, opacity)
    hsla(hue, saturation, lightness, opacity)

Здесь opacity - это непрозрачность цвета, которая может меняться от 0.0(полностью прозрачный) до 1.0(полностью
непрозрачный).

------------------------------------------------------------------------------------------------------------------------
 Установка цвета фона и текста
------------------------------------------------------------------------------------------------------------------------

Для установки цвета текста и фона любого элемента CSS определяет следующие стили:

    color: <color>;
    background-color: <color>;

Здесь <color> - это либо числовое представление текста либо его название.

------------------------------------------------------------------------------------------------------------------------
 Адаптивный дизайн
------------------------------------------------------------------------------------------------------------------------

Адаптивный дизайн(progressive enhancement) - это когда сначала создаётся базовая версия сайта, которая работает даже на
самых старых браузерах, а затем накручивается функционал в зависимости от браузера пользователя и скорости работы его
Интернет-соединения. Игрушечным примером этой стратегии разработки сайта может служить следующий код:

    html {
        background-color: rgb(235, 177, 131);
        background-color: hsl(27, 72%, 72%);
    }

HSL цвета были введены в CSS3 и следовательно старые браузеры не поддерживают это свойство. Поэтому можно сначала
указать цвет в формате RGB, а затем в HSL. Старый браузер поймёт RGB цвет и пропустит непонятное ему свойство HSL.
Новый браузер применит последний цвет, т.е. HSL, т.к. он может распознать оба свойства.

*/

/* HTML and Body Styles */

html {
    /* Установка фона всего документа в оранжевый цвет. */
    background-color: hsl(27, 72%, 72%);
}

body {
    /* Установка цвета текста всех элементов, который находятся внутри body в тёмно-серый цвет. */
    color: rgb(91, 91, 91);

    /* Установка цвета фона части документа, которая оказалась внутри body, в цвет слоновой кости. Остальной фон будет
       оранжевым благодаря селектору html, который определён выше. */
    background-color: ivory;
}

/* Heading Styles */

/* Установка цвета текста в заголовках первого уровня в белый цвет на оранжевом фоне. */
h1 {
    color: white;
    background-color: rgb(222, 128, 60);
}

/* Установка цвета текста в заголовках второго уровня в белый цвет на светло-оранжевом фоне. */
h2 {
    color: white;
    background-color: rgb(235, 177, 131);
}

/* Aside and Blockquote Styles */





/* Navigation Styles */	





/* List Styles */





/* Footer Styles */
